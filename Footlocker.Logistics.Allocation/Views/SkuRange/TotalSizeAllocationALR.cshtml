@model IEnumerable<Footlocker.Logistics.Allocation.Models.SizeAllocationTotal>

<style>
    .total 
    {
    }
    .initdemand
    {
        font-color:Red; 
        background-color : #99FFCC;
    }
</style>

<script>
    function GetMinTotals() {
        var sum = 0;
        $("input[name*='].Min']:not([name*='det']").each(function () {
            sum += Number($(this).val());
        }); 
        $('#MinTotal').empty().append(sum);
    }

    $(document).ready(
        function () {
            $("input[name*='].Min']:not([name*='det']").blur(GetMinTotals);

            GetMinTotals();
        }
    );

</script>

@if (Model.Count() == 0)
{
    @Html.Raw("No stores selected.<br><br>")
}
else
{

using (Html.BeginForm("SaveTotalSizeAllocation", "SkuRange", FormMethod.Post))
{
   <fieldset>
<b>Update all filtered stores:</b><br />
@Html.HiddenFor(m => Model.First().StartDate)
<span title = "Last day of learning">End:</span>
                    @(Html.Telerik().DatePicker()
                            .Name("[0].EndDate")
                            .HtmlAttributes(new { id = "DatePicker_wrapper", title = "Last day of allocation" })
                            .Value(Model.First().EndDate)
                    )

@if (Model.First().ModifiedDates)
{
    @Html.Raw("*** Dates are currently not the same for all stores.<br>")
}
else
{ 
    @Html.Raw("<br>")
}
<div class="t-widget t-grid">
<table cellpadding=0 cellspacing=0>
    <thead class="t-grid-header">
    <tr>
        <th class='t-header'></th>
    @{
string prevStore = "";
string prevDiv = "";
if (Model.Count() > 0)
{
    prevStore = Model.First().Store;
    prevDiv = Model.First().Division;
}
Boolean alternate = false;
foreach (var item in Model)
{
            @Html.Raw("<th class='t-header'>")
                @Html.Raw(item.Size)
            @Html.Raw("</th>")        
}
    }
    </tr>
    </thead>

@{
prevStore = "FIRST";
prevDiv = "FIRST";
alternate = false;
int count = 0;
foreach (var item in Model)
{
    if (!((prevDiv.Equals(item.Division)) && (prevStore.Equals(item.Store))))
    {
        if (!(prevDiv.Equals("FIRST")))
        {
                @Html.Raw("</tr>");
        }
        prevDiv = item.Division;
        prevStore = item.Store;
        if (alternate)
        {
                @Html.Raw("<tr class = 't-alt'>")
        }
        else
        {
                @Html.Raw("<tr>")
        }
        alternate = !alternate;
                @Html.Raw("<td>")
                    @Html.HiddenFor(modelItem => item.PlanID, new { id = "[" + count + "].PlanID" })
                    @Html.HiddenFor(modelItem => item.Division, new { id = "[" + count + "].Division" })
                    @Html.HiddenFor(modelItem => item.Store, new { id = "[" + count + "].Store" })
                    @Html.HiddenFor(modelItem => item.Size, new { id = "[" + count + "].Size" })
                @Html.Raw("Range<br>Min Target&nbsp;(<span id='MinTotal' class='total'>0</span>)<br />Max Target<br />Min Days<br>Base Demand<br>&nbsp;&nbsp;&nbsp;</td>")
    }
        @Html.Raw("<td>")
@*            @Html.DisplayFor(modelItem => item.Size)
            @Html.Raw("<br>")*@
        @Html.Raw("<input name=\"[" + count + "].PlanID\" type=\"hidden\" value=\"" + item.PlanID + "\"/>")
        @Html.Raw("<input name=\"[" + count + "].Size\" type=\"hidden\" value=\"" + item.Size + "\"/>")
        @Html.CheckBox("[" + count + "].Range", item.Range)
        @Html.Raw("<br><input name=\"[" + count + "].Min\" type=\"text\" value=\"" + item.Min + "\" style = \"Width:28px\"/>")
    //@Html.TextBoxFor(modelItem => item.Min, new { style = "Width:20px", id = "[" + count + "].Min" })
        @Html.Raw("<br>")
        @Html.Raw("<input name=\"[" + count + "].Max\" type=\"text\" value=\"" + item.Max + "\" style = \"Width:28px\"/>")
    //@Html.TextBoxFor(modelItem => item.Max, new { style = "Width:20px", id = "[" + count + "].Max" })
        @Html.Raw("<br>")
        @Html.Raw("<input name=\"[" + count + "].Days\" type=\"text\" value=\"" + item.Days + "\" style = \"Width:28px\"/>")
        @Html.Raw("<br>")
        @Html.Raw("<input class=\"initdemand\" name=\"[" + count + "].InitialDemand\" type=\"text\" value=\"" + item.InitialDemand + "\" style = \"Width:28px\"/>")
    if (!(item.ModifiedStore))
    {
            @Html.Raw("<br>&nbsp;")
            @Html.Raw("&nbsp;")
            @Html.Raw("&nbsp;")
    }
    else
    {
            @Html.Raw("<br>***")
    }
    count++;
    //@Html.TextBoxFor(modelItem => item.Days, new { style = "Width:20px", id = "[" + count + "].Days" })
        @Html.Raw("</td>")        
}
if (!(prevDiv.Equals("FIRST")))
{
        @Html.Raw("</tr>");
}
}
</table>
</div>
<br />
<input type="submit" value="Apply to filtered stores" style="width:225px;" class="t-button"/>
@Html.Raw("<br>*** - indicates values are currently not the same for all filtered stores.")
</fieldset>
}
}


@if (ViewData["LifeCycle"] != null)
{ 
<script type="text/javascript">
var ts_days = @ViewData["LifeCycle"];
</script>
}
else
{ 
<script type="text/javascript">
    var ts_days = 365;
</script>

}

<script type="text/javascript">
    Date.prototype.addDays = function (days) {
        var dat = new Date(this.valueOf());
        dat.setDate(dat.getDate() + days);
        return dat;
    }

    function updateValue() {
        var date = new Date($('[name="[0].StartDate"]').val());
        if (date != '') {
            date = date.addDays(ts_days);
            $('[name="[0].EndDate"]').val((date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear());
        }
        else {
            $('[name="' + end + '"]').val('');
        } 
    }
</script>

<script type="text/javascript">
    function () {
        $('#DatePicker_wrapper').tooltip();
    }
    </script>

