@model IEnumerable<Footlocker.Logistics.Allocation.Models.Hold>

@{
    ViewBag.Title = "Holds";
}

<h2>Holds</h2>
<p>
    @Html.ActionLink("Create New", "Create", new { }, new { @class = "t-button" })
    @Html.ActionLink("Upload", "Upload", new { }, new { @class = "t-button" })
</p>
<script>
    function exportSelected() {
        var grid = $('#HoldGrid').data('tGrid');
        if (grid.filterBy === "") {
            $('#ExportGrid').attr('href', function () {
                return "/Hold/ExportGrid"
            });
        } else {
            $('#ExportGrid').attr('href', function () {
                return "/Hold/ExportGrid?filter=" + grid.filterBy;
            });
        }
    }

    function changeDuration(ddl) {
        window.location = "/Hold/Index?duration=" + ddl.value;
    }

    function DeleteGrid(ID) {
        if (confirm('Are you sure?')) {
            window.location = "/Hold/ConfirmDelete?ID=" + ID;
        }
    }

    function ReleaseGrid(ID) {
        //redirecting them to show them RDQs with ability to release them
        window.location = "/Hold/ReleaseRDQs?ID=" + ID;
    }

</script>
    @if ((ViewData["message"] != "") && (ViewData["message"] != null))
    { 
        <font color="Red">
        @Html.Raw(Convert.ToString(ViewData["message"]))
        </font>
    }
<div class="editor-field">
    <span>Filter: </span>
    @Html.DropDownList("Duration", new List<SelectListItem> { new SelectListItem { Text = "All", Value = "All" }, new SelectListItem { Text = "Temporary", Value = "Temporary" }, new SelectListItem { Text = "Permanent", Value = "Permanent" } }, new { onChange = "changeDuration(this);" })
</div>

<div class="t-tabstrip-wrapper">
<div id="tabstrip" data-role="tabstrip" tabindex="0" class="t-widget t-header t-tabstrip" role="tablist" aria-activedescendant="tabstrip_ts_active">
                    <ul class="t-tabstrip-items t-reset">
                        <li class="t-item t-state-default t-state-active" role="tab" aria-controls="tabstrip-3"><span class="t-loading t-complete"></span><a class="t-link" href="/Hold/Index">
                            All Holds
                        </a></li>                    
                        <li class="t-item t-state-default t-first t-tab-on-top" role="tab" aria-controls="tabstrip-1" aria-selected="true"><span class="t-loading t-complete"></span><a class="t-link" href="/Hold/IndexByProduct">
                            By Product
                        </a></li><li class="t-item t-state-default" role="tab" aria-controls="tabstrip-2"><span class="t-loading t-complete"></span><a class="t-link" href="/Hold/IndexByStore">
                            By Location
                        </a></li>
                        </ul>
<div class="t-content t-state-active" id="tabstrip-1" role="tabpanel" aria-expanded="true" style="display: block; opacity: 1;">
<br />
@*<table>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Division)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Store)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Level)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Value)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StartDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EndDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.HoldType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Comments)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreatedBy)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreateDate)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Division)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Store)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Level)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Value)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StartDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EndDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.HoldType)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Comments)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreatedBy)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreateDate)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) | 
            @Html.ActionLink("Release", "Delete", new { id=item.ID }) 
        </td>
    </tr>
}

</table>
*@
@(Html.Telerik().Grid(Model)
        .Name("HoldGrid")
        .Columns(columns =>
        {
            columns.Bound(o => o.Division).Title("Div").Width(50);
            columns.Bound(o => o.Store).Width(50);
            columns.Bound(o => o.Level);
            columns.Bound(o => o.Value);
            columns.Bound(o => o.StartDate);
            columns.Bound(o => o.EndDate);
            columns.Bound(o => o.Duration);
            columns.Bound(o => o.HoldType);
            columns.Bound(o => o.Comments);
            columns.Bound(o => o.CreatedBy).Title("Updated By");
            columns.Bound(o => o.CreateDate).Title("Last Updated");
            columns.Template(@<text> 
                                   @Html.Raw("<a class=\"t-button\" href='javascript:DeleteGrid(\"" + item.ID + "\");'>Delete</a>")
                                   <a class='t-button' href="@Url.Content("~/Hold/Edit/" + @item.ID)">Edit</a>
                                   @if (item.ReserveInventoryBool)
                                   { 
                                       @Html.Raw("<a class=\"t-button\" href='javascript:ReleaseGrid(\"" + item.ID + "\");'>Release</a>")
                                   }
                               </text>)
                .ClientTemplate("<a class=\"t-button\" href='javascript:DeleteGrid(\"<#= ID #>\");'>Delete</a>"
                + "<a class='t-button' href='"
                    + Url.Content("~/Hold/Edit/<#= ID #>")
                    + "'>Edit</a>"
                + "<# if (ReserveInventoryBool) { #>"
                    + "<a class=\"t-button\" href='javascript:ReleaseGrid(\"<#= ID #>\");'>Release</a>"
                + "<# } #>"
                ).Width(300);

        })
        .ToolBar(toolbar =>
        {
            toolbar.Template(@<text>
                @Html.ActionLink(
                         "Export Grid",
                         "ExportGrid",
                         "SkuAttribute",
                         new
                         {
                             filter = "__filterBy__"
                         },
                         new
                         {
                             @class = "t-button",
                             @onclick = "exportSelected()",
                             id = "ExportGrid"
                         }
                      )
                </text>);
        })
        .DataBinding(dataBinding =>
        {
            //dataBinding.Server().Select("Index", "OverridePO");
            dataBinding.Ajax().Select("_Index", "Hold");
        })
        .Sortable(sorting => sorting.Enabled(true))
        .Pageable(paging => paging.Enabled(true))
        .Filterable(filtering => filtering.Enabled(true))
        .Groupable(grouping => grouping.Enabled(false))
            .Footer(true)
)
</div>                
</div>
</div>
