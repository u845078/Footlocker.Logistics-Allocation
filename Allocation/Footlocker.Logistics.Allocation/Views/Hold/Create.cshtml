@model HoldModel
@{
    ViewBag.Title = "Create Hold";
}

<script type="text/javascript">
    function setValueLabelToLevelSelection() {
        // Change the 'Value' label's label text to match the Level selection, per users...
        var levelOptions = $("#Hold_Level")[0].childNodes;
        $(levelOptions).each(function (idx, lvl) {
            if (lvl.selected) {
                $('label[for="Hold_Value"]').text(lvl.text);
                if (lvl.text == 'Store') {
                    $("#Hold_Value").hide();
                    $('label[for="Hold_Value"]').hide();
                }
                else {
                    $("#Hold_Value").show();
                    $('label[for="Hold_Value"]').show();
                }
            }
        });
    }

    function showHideHoldType() {
        //if permanent hold, don't allow them to reserve inventory
        var levelOptions = $("#Hold_Duration")[0].childNodes;
        $(levelOptions).each(function (idx, lvl) {
            if (lvl.selected) {
                if (lvl.text == 'Permanent') {
                    selectCancelInventory();
                    $("#Hold_HoldType").prop("disabled", true);
                    $("#enddate").hide();
                }
                else {
                    $("#Hold_HoldType").prop("disabled", false);
                    $("#enddate").show();
                }
            }
        });
    }

    function selectCancelInventory() {
        //if permanent hold, don't allow them to reserve inventory
        var levelOptions = $("#Hold_HoldType")[0].childNodes;
        $(levelOptions).each(function (idx, lvl) {
            if (lvl.text == 'Cancel Inventory') {
                lvl.selected = true;
            }
            else {
                lvl.selected = false;
            }
        });
    }

    function showStoreSelector() {
        $("#ShowStoreSelector").val("yes");
        $('#Hold_Store').hide();
        $('form#CreateForm').submit();
    }

    function ConfirmStore() {
        var store = $('#Hold_Store').val();
        var ruleSetID = $('#RuleSetID').val();
        if ((store == '' || store == null) && ruleSetID == 0)
            return confirm("You are about to create a hold without store. Are you sure?");
        else
            return true;
    }

    function hideStoreSelector() {
        $("#ShowStoreSelector").val("no");
        $('#RuleSetID').val($('#RuleToAdd_RuleSetID').val());

        $('#ruletab').hide();
        $('#Hold_Store').hide();
        $('#maintab').show();
        setValueLabelToLevelSelection();
    }

    $(function () {
        // Sync the value label text to the default level selection
        setValueLabelToLevelSelection();

        // Wire up a change handler for the Level Selection (to change Value label text)
        $("#Hold_Level").change(setValueLabelToLevelSelection);

        $("#Hold_Duration").change(showHideHoldType);
    });

</script>

<h2>Create Hold</h2>

@if (Model.ShowStoreSelector == "yes")
{
    <div id="ruletab" style="margin-left:100px;margin-right:200px;" class="fieldset">
        @Html.Partial(@Url.Content("~/Views/Rule/RuleFilter.cshtml"), Model.RuleModel, ViewData)
        <br />
    </div>
    @Html.Raw("<div id=\"maintab\" style=\"display:none;\">")
}

@using (Html.BeginForm("Create", "Hold", FormMethod.Post, new { id = "CreateForm" }))
{
    @Html.ValidationSummary(true)
    if (Convert.ToString(ViewData["message"]) != "" && ViewData["message"] != null)
    {        
        <font color="Red">
            @Html.Raw(Convert.ToString(ViewData["message"]))
        </font>
    }
    <fieldset>
        <legend>Hold</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Division)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Hold.Division, new SelectList(Model.Divisions, "DivCode", "DisplayName"))
            @Html.ValidationMessageFor(model => model.Hold.Division)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Store) (optional)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Hold.Store)
            @Html.ValidationMessageFor(model => model.Hold.Store)
            @Html.HiddenFor(model => model.ShowStoreSelector)

            <span id="pickedStores">
                @if (Model.RuleSetID > 0)
                {
                    @Html.Raw("(Stores are specified)")
                }
            </span>
            <input type="submit" value="Select Stores" class="t-button" onclick="return showStoreSelector()" />
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Duration)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Hold.Duration, new List<SelectListItem>
                                                                {
                                                                    new SelectListItem
                                                                    {
                                                                        Text = "Temporary",
                                                                        Value = "Temporary"
                                                                    },
                                                                    new SelectListItem
                                                                    {
                                                                        Text = "Permanent",
                                                                        Value = "Permanent"
                                                                    }
                                                                })
            @Html.ValidationMessageFor(model => model.Hold.Duration)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Level)
        </div>
        <div class="editor-field">
            @(Html.DropDownListFor(model => model.Hold.Level,
            new List<SelectListItem> {
                new SelectListItem { Text = "Store", Value = "All" },
                new SelectListItem { Text = "Dept (##)", Value = "Dept" },
                new SelectListItem { Text = "Dept-Brand (##-###)", Value = "DeptBrand" },
                new SelectListItem { Text = "Dept-Team (##-###)", Value = "DeptTeam" },
                new SelectListItem { Text = "Dept-Category (##-###)", Value = "Category" },
                new SelectListItem { Text = "Dept-Cat-Brand (##-###-###)", Value = "DeptCatBrand" },
                new SelectListItem { Text = "Dept-Cat-Team (##-###-###)", Value = "DeptCatTeam" },
                new SelectListItem { Text = "Vendor-Dept (#####-##)", Value = "VendorDept" },
                new SelectListItem { Text = "Vendor-Dept-Category (#####-##-###)", Value = "VendorDeptCategory" },
                new SelectListItem { Text = "Sku (##-##-#####-##)", Value = "Sku" } })
                )
            @Html.ValidationMessageFor(model => model.Hold.Level)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Value)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Hold.Value)
            @Html.ValidationMessageFor(model => model.Hold.Value)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.StartDate, new { title = "Hold is effective the night of the start date" })
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Hold.StartDate)
            @Html.ValidationMessageFor(model => model.Hold.StartDate)
        </div>
        <div id="enddate">
            <div class="editor-label">
                @Html.LabelFor(model => model.Hold.EndDate, new { title = "Hold is effective until the night of the end date.  RDQs will be generated this night." })
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Hold.EndDate)
                @Html.ValidationMessageFor(model => model.Hold.EndDate)
            </div>
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.HoldType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Hold.HoldType, new List<SelectListItem> { new SelectListItem { Text = "Reserve Inventory", Value = "Reserve Inventory" }, new SelectListItem { Text = "Cancel Inventory", Value = "Cancel Inventory" } })
            @Html.ValidationMessageFor(model => model.Hold.ReserveInventory)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hold.Comments)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Hold.Comments)
            @Html.ValidationMessageFor(model => model.Hold.Comments)
            @Html.HiddenFor(model => model.RuleSetID)
        </div>
        <p>
            <input type="submit" value="Create" class="t-button" onclick="return ConfirmStore()" />
        </p>
    </fieldset>
}
@if (Model.ShowStoreSelector == "yes")
{
    @Html.Raw("</div>")
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "t-button" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}