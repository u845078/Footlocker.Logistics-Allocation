@model SkuAttributeModel

@{
    ViewBag.Title = "Create";
}
<script>
    function autopostback(dropdown) {
        window.location = '/SkuAttribute/Create?div=' + dropdown.value;
    }

    function validate() {
        if ($('#Category').val() == "" && $('#BrandID').val() != "") {
            alert("Category selection is required when a BrandID is selected!");
            return false;
        } else {
            return true;
        }
    }

    //check Category or Brand attributes
    function checkAttribute(attr) {
        var isChecked = false;

        if (attr == 1 && $('#Category').val() != "") {
            isChecked = true;
        }
        else if (attr == 3 && $('#BrandID').val() != "") {
            isChecked = true;
        }

        if (isChecked) {
            $('#Attributes_' + attr + '__Mandatory').attr("checked", "true");
            $('#Attributes_' + attr + '__WeightInt').val(0);
            $('#Attributes_' + attr + '__WeightInt').attr("disabled", "disabled");
        }
    }

    function enableCheckbox(cb, attr) {

        if (cb.checked) {
            $('#Attributes_' + attr + '__WeightInt').val(0);
            $('#Attributes_' + attr + '__WeightInt').attr("disabled", "disabled");
            return true;
        }
        else {
            var isEnabled = true;

            if (attr == 0) {
                isEnabled = false;
                alert("Department attribute is Mandatory!");
            }
            else if (attr == 1 && $('#Category').val() != "") {
                isEnabled = false;
                alert("Category attribute is Mandatory when a Category is selected!");
            }
            else if (attr == 3 && $('#BrandID').val() != "") {
                isEnabled = false;
                alert("BrandID attribute is Mandatory when a BrandID is selected!");
            }

            if (isEnabled == true) {
                $('#Attributes_' + attr + '__WeightInt').removeAttr("disabled");
                return true;
            } else {
                $('#Attributes_' + attr + '__WeightInt').val(0);
                $('#Attributes_' + attr + '__WeightInt').attr("disabled", "disabled");
                return false;
            }
        }
    }

    function mandatoryScreenUpdate(cb, attr) {
        if (cb.checked) {
            $('#Attributes_' + attr + '__WeightInt').val(0);
            $('#Attributes_' + attr + '__WeightInt').attr("disabled", "disabled");
        }
        else
        {
            $('#Attributes_' + attr + '__WeightInt').removeAttr("disabled");
        }
    }

    function updateSum() {
        var sum = 0;
        sum = sum + parseInt($('#Attributes_1__WeightInt').val());
        sum = sum + parseInt($('#Attributes_2__WeightInt').val());
        sum = sum + parseInt($('#Attributes_3__WeightInt').val());
        sum = sum + parseInt($('#Attributes_4__WeightInt').val());
        sum = sum + parseInt($('#Attributes_5__WeightInt').val());
        sum = sum + parseInt($('#Attributes_6__WeightInt').val());
        sum = sum + parseInt($('#Attributes_7__WeightInt').val());
        sum = sum + parseInt($('#Attributes_8__WeightInt').val());
        sum = sum + parseInt($('#Attributes_9__WeightInt').val());
        sum = sum + parseInt($('#Attributes_10__WeightInt').val());
        sum = sum + parseInt($('#Attributes_11__WeightInt').val());
        sum = sum + parseInt($('#Attributes_12__WeightInt').val());
        sum = sum + parseInt($('#Attributes_13__WeightInt').val());
        sum = sum + parseInt($('#Attributes_14__WeightInt').val());
        sum = sum + parseInt($('#Attributes_15__WeightInt').val());
        sum = sum + parseInt($('#Attributes_16__WeightInt').val());
        sum = sum + parseInt($('#Attributes_17__WeightInt').val());
        sum = sum + parseInt($('#Attributes_18__WeightInt').val());

        $('#sum').empty().append('Total Weight:  ' + sum);
    }
</script>
<h2>Create Quantum Attribute Matching</h2>

<fieldset>
    @if (ViewData["message"] != null)
    {
        @Html.Raw("<font color='red'>" + ViewData["message"] + "</font>")
    }

    @using (Html.BeginForm("DivisionSelected", "SkuAttribute"))
    {
        @Html.AntiForgeryToken()
        <div class="editor-field">
            @Html.LabelFor(model => model.Division)
            <br />
            @Html.DropDownList("Division", Model.DivisionList, new { onchange = "this.form.submit();" })<br />
            @Html.ValidationMessageFor(model => model.Division)
        </div>
    }

    @using (Html.BeginForm("DepartmentSelected", "SkuAttribute"))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Division)
        <div class="editor-field">
            @Html.LabelFor(model => model.Department)
            <br />
            @Html.DropDownList("Department", Model.DepartmentList, new { onchange = "this.form.submit();" })<br />
            @Html.ValidationMessageFor(model => model.Department)
        </div>
    }

    @using (Html.BeginForm("Create", "SkuAttribute"))
    {
        @Html.HiddenFor(model => model.Division)
        @Html.HiddenFor(model => model.Department)
        @Html.AntiForgeryToken()

        <div class="editor-field">
            @Html.LabelFor(model => model.Category) [*** Optional ***] <br />
            @Html.DropDownList("Category", Model.CategoryList, string.Empty, new { onchange = "checkAttribute(1);" })
            @Html.ValidationMessageFor(model => model.Category)
        </div>
        <div class="editor-field">
            @Html.LabelFor(model => model.BrandID) [*** Optional ***] <br />
            @Html.DropDownList("BrandID", Model.BrandList, string.Empty, new { onchange = "checkAttribute(3);" })
        </div>
        <div class="editor-field">
            @Html.LabelFor(model => model.SKU) [*** Optional ***] <br />
            @Html.EditorFor(model => model.SKU)
            @Html.ValidationMessageFor(model => model.SKU)
        </div>
        <div class="editor-field">
            <div class="editor-field">
                @Html.LabelFor(model => model.WeightActive)
                <br />
                @Html.TextBoxFor(model => model.WeightActive, new { @type = "number", min = 1, max = 100, @style = "width: 40px; margin-top: 5px;" })
                <label>1 = Inactive, 100 = Active</label>
            </div>
        </div>
        <br />
        @Html.ValidationSummary(true)
        <br />

        if (Model.Message != null)
        {
            @Html.Raw("<font color='red'>" + Model.Message + "</font>")
        }

        <table>
            @for (var count = 0; count < Model.Attributes.Count(); count++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(model => Model.Attributes[count].AttributeType)
                        @Html.HiddenFor(model => Model.Attributes[count].AttributeType)
                    </td>
                    <td>
                        @Html.LabelFor(model => Model.Attributes[count].Mandatory)
                        @Html.CheckBoxFor(model => Model.Attributes[count].Mandatory, new { onclick = "return enableCheckbox(this," + count + ");" })
                    </td>
                    <td>
                        @Html.LabelFor(model => Model.Attributes[count].Weight)
                        @if (Model.Attributes[count].Mandatory)
                        {
                            @Html.TextBoxFor(model => Model.Attributes[count].WeightInt, new { disabled = "disabled", style = "width: 3em;", onblur = "updateSum();" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => Model.Attributes[count].WeightInt, new { style = "width: 3em;", onblur = "updateSum();" })
                        }
                    </td>
                </tr>
            }
            <tr>
                <td></td>
                <td colspan="2" align="right">
                    <div id="sum">Total Weight:  0</div>
                </td>
            </tr>
        </table>
        <p>
            <input type="submit" value="Save" onclick="return validate();" name="submitButton" />
        </p>

        <p>
            <input type="submit" value="Reinitialize" name="submitButton" />
        </p>
    }
</fieldset>

<br />
@Html.ActionLink("Back to List", "Index",null, new {@class="t-button"})
