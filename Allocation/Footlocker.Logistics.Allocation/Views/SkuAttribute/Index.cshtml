@model IEnumerable<SkuAttributeHeader>

@{
    ViewBag.Title = "Quantum Attribute Matching";
    bool hasEditRole = ViewBag.hasEditRole;
}

<h2>Quantum Attribute Matching</h2>

<p>
    @if (hasEditRole)
    {
        @Html.ActionLink("Create New", "Create", null, new { @class = "t-button" })
        @Html.ActionLink("Upload", "Upload", "SkuAttribute", null, new { @class = "t-button" })
    }
</p>

<script type="text/javascript">
    function Delete(ID) {
        if (confirm('Are you sure?')) {
            window.location = "SkuAttribute/Delete/" + ID;
        }
    }   

    // grab data from grid and pass it to the controller (current version of telerik does not support this functionality)
    function exportSelected() {
        var grid = $('#SkuAttributeGrid').data('tGrid');
        if (grid.filterBy === "") {
            $('#ExportGrid').attr('href', function () {
                return "/SkuAttribute/ExportGrid";
            });
        } else {
            $('#ExportGrid').attr('href', function () {
                return "/SkuAttribute/ExportGrid?filter=" + grid.filterBy;
            });
        }
    }
</script>

@if (ViewData["message"] != null)
{
    @Html.Raw("<font color='red'>" + ViewData["message"] + "</font>")
}

@Html.ValidationSummary(true)


@if (hasEditRole)
{
    @(Html.Telerik().Grid<SkuAttributeHeader>()
        .Name("SkuAttributeGrid")
        .Columns(columns =>
        {
            columns.Bound(o => o.Division).Width(60);
            columns.Bound(o => o.Dept).Width(60);
            columns.Bound(o => o.CategoryForDisplay);
            columns.Bound(o => o.BrandForDisplay);
            columns.Bound(o => o.SKU);
            columns.Bound(o => o.WeightActiveInt).Title("Weight for Active");
            columns.Bound(o => o.CreatedBy).Title("UpdatedBy");
            columns.Bound(o => o.CreateDate).Title("UpdateDate");
            columns.Template(@<text>
                                <a class='t-button' href="@Url.Content("~/SkuAttribute/Edit/" + @item.ID)">Edit</a>
                                <a class='t-button' href="@Url.Content("~/SkuAttribute/Export/" + @item.ID)">Export</a>
                                @Html.Raw("<a class=\"t-button\" href='javascript:Delete(\"" + item.ID + "\");'>Delete</a>")
                             </text>).ClientTemplate("<a class='t-button' href='"
                    + Url.Content("~/SkuAttribute/Edit/<#= ID #>")
                    + "'>Edit</a>"
                    + "<a class='t-button' href='"
                    + Url.Content("~/SkuAttribute/Export/<#= ID #>")
                    + "'>Export</a>"
                    + "<a class='t-button' href='"
                    + Url.Content("~/SkuAttribute/Delete/<#= ID #>")
                    + "'>Delete</a>"
                    ).HtmlAttributes(new { style = "text-align: left" }).Width(300);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Template(@<text>
                                @Html.ActionLink(
                                    "Export Grid",
                                    "ExportGrid",
                                    "SkuAttribute",
                                    new {
                                        filter = "__filterBy__",
                                    },
                                    new {
                                        @class = "t-button",
                                        @onclick = "exportSelected()",
                                        id = "ExportGrid"
                                    }
                                )
                                </text>);
        })
        .DataBinding(dataBinding =>
        {
            dataBinding.Ajax().Select("_Index", "SkuAttribute");
        })
        .Sortable(sorting => sorting.Enabled(true))
        .Pageable(paging => paging.Enabled(true))
        .Filterable(filtering => filtering.Enabled(true))
        .Groupable(grouping => grouping.Enabled(false))
        .Footer(true)
    )
}
else
{
    @(Html.Telerik().Grid<SkuAttributeHeader>()
            .Name("SkuAttributeGrid")
            .Columns(columns =>
            {
                columns.Bound(o => o.Division).Width(60);
                columns.Bound(o => o.Dept).Width(60);
                columns.Bound(o => o.CategoryForDisplay);
                columns.Bound(o => o.BrandForDisplay);
                columns.Bound(o => o.WeightActiveInt).Title("Weight for Active");
                columns.Bound(o => o.CreatedBy).Title("UpdatedBy");
                columns.Bound(o => o.CreateDate).Title("UpdateDate");
                columns.Template(@<text>
                                <a class='t-button' href="@Url.Content("~/SkuAttribute/Edit/" + @item.ID)">View</a>
                </text>).ClientTemplate("<a class='t-button' href='"
                        + Url.Content("~/SkuAttribute/Edit/<#= ID #>")
                        + "'>View</a>"
                        ).HtmlAttributes(new { style = "text-align: left" }).Width(300);
            })
            .ToolBar(toolbar =>
            {
                toolbar.Template(
                    @<text>
                        @Html.ActionLink(
                            "Export Grid",
                            "ExportGrid",
                            "SkuAttribute",
                            new
                            {
                                filter = "__filterBy__",
                            },
                            new
                            {
                                @class = "t-button",
                                @onclick = "exportSelected()",
                                id = "ExportGrid"
                            }
                        )
                    </text>);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax().Select("_Index", "SkuAttribute");
            })
            .Sortable(sorting => sorting.Enabled(true))
            .Pageable(paging => paging.Enabled(true))
            .Filterable(filtering => filtering.Enabled(true))
            .Groupable(grouping => grouping.Enabled(false))
                .Footer(true)
    )
}
