@model CreateStoreAttributeModel

@{
    ViewBag.Title = "Create";
}

<script type="text/javascript">
    function setValueLabelToLevelSelection() {
        // Change the 'Value' label's label text to match the Level selection, per users...
        var div = $("#StoreAttribute_Division").val();
        var levelOptions = $("#StoreAttribute_Level")[0].childNodes;
        $('*[id*=fob_dropdown]:visible').each(function () {
            $(this).hide();
        });
        $(levelOptions).each(function (idx, lvl) {
            if (lvl.selected) {
                $('label[for="StoreAttribute_Value"]').text(lvl.text);
                if (lvl.text == 'All') {
                    $("#StoreAttribute_Value").hide();
                    $('label[for="StoreAttribute_Value"]').hide();
                }
                else if (lvl.text == 'FOB') {
                    $("#StoreAttribute_Value").hide();
                    $("#" + div + "fob_dropdown").show();
                    $('label[for="StoreAttribute_Value"]').show();
                    setValueToFOBSelection();
                }
                else {
                    $("#StoreAttribute_Value").show();
                    $('label[for="StoreAttribute_Value"]').show();
                }
            }
        });
    }

    function setValueToFOBSelection() {
        // Change the 'Value' label's label text to match the Level selection, per users...
        var div = $("#StoreAttribute_Division").val();
        var levelOptions = $("#" + div + "fob_dropdown")[0].childNodes;
        $(levelOptions).each(function (idx, lvl) {
            if (lvl.selected) {
                $("#StoreAttribute_Value").val(lvl.value);
            }
        });
    }


    $(function () {
        $("#fob_dropdown").hide();
        // Sync the value label text to the default level selection
        setValueLabelToLevelSelection();

        // Wire up a change handler for the Level Selection (to change Value label text)
        $("#StoreAttribute_Level").change(setValueLabelToLevelSelection);
        $('*[id*=fob_dropdown]').each(function () {
            $(this).change(setValueToFOBSelection);
        });
        $("#StoreAttribute_Division").change(setValueLabelToLevelSelection);
    });


</script>


<h2>Create</h2>

@if (ViewData["message"] != null)
{
    @Html.Raw("<font color='red'>" + ViewData["message"] + "</font>")
}
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()

    <fieldset>
        <legend>StoreAttribute</legend>
        <table>
            <tr>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.Division)
                </td>
                <td>
                    @Html.DropDownListFor(model => model.StoreAttribute.Division, new SelectList(Model.Divisions, "DivCode", "DivisionName"))
                </td>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.Store)
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.Store)
                    @Html.ValidationMessageFor(model => model.StoreAttribute.Store)
                </td>
            </tr>
            <tr>
                <td>
                    @*@Html.LabelFor(model => model.StoreAttribute.LikeDivision)*@
                </td>
                <td>
                    @*@Html.DropDownListFor(model => model.StoreAttribute.LikeDivision, new SelectList(Model.Divisions, "DivCode", "DivisionName"))*@
                </td>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.LikeStore)
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.LikeStore)
                    @Html.ValidationMessageFor(model => model.StoreAttribute.LikeStore)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.Level)
                </td>
                <td>
                    @Html.DropDownListFor(model => model.StoreAttribute.Level, new List<SelectListItem> { new SelectListItem { Text = "All", Value = "All" }, new SelectListItem { Text = "FOB", Value = "FOB" }, new SelectListItem { Text = "Department (##)", Value = "Dept" } })
                </td>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.Value)
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.Value)
                    @foreach (Footlocker.Common.Division div in Model.Divisions)
                    {
                        @Html.DropDownListFor(model => model.StoreAttribute.Value, new SelectList((from a in Model.FOBs where a.Division == div.DivCode select a), "Code", "Description"), new { id = div.DivCode + "fob_dropdown" })
                    }
                    @Html.ValidationMessageFor(model => model.StoreAttribute.Value)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.Weight)
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.Weight)
                    @Html.ValidationMessageFor(model => model.StoreAttribute.Weight)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.LikeStoreDemandScalingFactor)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.StoreAttribute.LikeStoreDemandScalingFactor, new { type = "number", min = "0", step = "0.10", style = "width:133px;" })
                    @Html.ValidationMessageFor(model => model.StoreAttribute.LikeStoreDemandScalingFactor)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.StartDate)
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.StartDate)
                    @Html.ValidationMessageFor(model => model.StoreAttribute.StartDate)
                </td>
                <td>
                    @Html.LabelFor(model => model.StoreAttribute.EndDate)&nbsp;
                </td>
                <td>
                    @Html.EditorFor(model => model.StoreAttribute.EndDate)
                    @Html.ValidationMessageFor(model => model.StoreAttribute.EndDate)
                </td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <input type="submit" value="Create" />
                </td>
                <td></td>
            </tr>
        </table>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "t-button" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
