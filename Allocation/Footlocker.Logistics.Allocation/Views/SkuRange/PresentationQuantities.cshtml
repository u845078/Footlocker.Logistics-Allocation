@model Footlocker.Logistics.Allocation.Models.SkuSetupModel

@{
    ViewBag.Title = "Pres Qty " + Model.RangePlan.Sku;
}
@*@Html.EditorFor(model => Model.Plan)
*@

<style>
    body {
        background-color: #fff;
    }

</style>
    <table cellpadding=0 cellspacing=0><tr><td>
        <img src="@Url.Content("~/Image/ShowImage/?sku=" + Model.RangePlan.Sku)"/>
    </td><td valign="middle">
        <span class="editor-label">
            <b>@Html.LabelFor(model => model.RangePlan.Sku):</b>
        </span>
        <span class="editor-field">
            @Html.Raw(Model.RangePlan.Sku)
        </span>
        &nbsp;&nbsp;
        <span class="editor-label">
            <b>@Html.LabelFor(model => model.RangePlan.Description, "Comment"):</b>
        </span>
        <span class="editor-field">
            @Html.Raw(Model.RangePlan.Description)
        </span>
        &nbsp;&nbsp;
        <span class="editor-field">
            @Html.Raw("<b># Stores:</b>  " + Model.RangePlan.StoreCount)
        </span>
        <br />
             <br />
        <span class="editor-label">
            <b>@Html.LabelFor(model => model.RangePlan.CreatedBy):</b>
        </span>
        <span class="editor-field">
            @Html.Raw(Model.RangePlan.CreatedBy)
        </span>
             &nbsp;&nbsp;
        <span class="editor-label">
            <b>@Html.LabelFor(model => model.RangePlan.CreateDate):</b>
        </span>
        <span class="editor-field">
            @Html.Raw(Model.RangePlan.CreateDate)
        </span>
        <br />

    </td></tr>
    @if (Model.RangePlan.Launch)
    { 
        <tr>
        <td colspan="2">
            @if (Model.RangePlan.LaunchDate != null)
            {
                @Html.Raw("<font color='red'><b>This sku Launches on " + ((DateTime)Model.RangePlan.LaunchDate).ToShortDateString() + "</b></font>")
            }
            else
            { 
                @Html.Raw("<font color='red'><b>This sku Launches on ??? </b></font>")            
            }
            @Html.Raw("<br><font color='red'><b>The start date must be the launch date.</b></font>")
        </td>
        </tr>

    }

    </table>

<br />
<script type="text/javascript">

    function hideStoreSelector() {
        window.location = window.location;
    }

    function showRuleSelector() {
        $('#sizeallocs').hide();
        $('#filtermessage').hide();
        $('#ruleSelector').show();
        $('#UploadRules').hide();
        $('#FilterRules').show();
    }
    function showRuleSelectorExcel() {
        $('#sizeallocs').hide();
        $('#filtermessage').hide();
        $('#ruleSelector').show();
        $('#FilterRules').hide();
        $('#UploadRules').show();
    }

</script>

@*@Html.ActionLink("Export to Excel", "ExcelSizeAllocation", new {planID = Model.Plan.Id}, new { @class="t-button"})*@
@if ((ViewData["message"] != null) && (ViewData["message"] != "")) {
    @Html.Raw("<font color='red'><b>" + ViewData["message"] + "</b></font><br><br>")
}
<div>
@Html.ActionLink("Add Delivery Group", "CreateDeliveryGroup", new { planID = Model.RangePlan.Id }, new { @class = "t-button", @style = "margin-bottom: 5px;" })
@(Html.Telerik().Grid(Model.DeliveryGroups)
        .Name("DeliveryGroups")
        .Columns(columns =>
        {
            columns.Bound(o => o.Selected)
                .Template(@<text> 
                            @if (item.Selected)
                            { 
                                @Html.Raw("<a class=\"t-button\" href='/SkuRange/SelectDeliveryGroup?deliveryGroupID=" + item.ID + "&planID=" + item.PlanID +"'>Hide</a>")
                            }
                            else
                            {
                                @Html.Raw("<a class=\"t-button\" href='/SkuRange/SelectDeliveryGroup?deliveryGroupID=" + item.ID + "&planID=" + item.PlanID + "'>Show</a>")
                            }
                        </text>).Width(50);

            columns.Bound(o => o.Name).Width(150).Title("Delivery Group");
            columns.Bound(o => o.StoreCount).Width(60);
            columns.Bound(o => o.StartDate).Format("{0:MM/dd/yyyy}").Width(60);
            columns.Bound(o => o.EndDate).Format("{0:MM/dd/yyyy}").Width(60);
            //columns.Bound(o => o.MinStart).Format("{0:MM/dd/yyyy}").Width(60).Title("Min Start");
            //columns.Bound(o => o.MinEnd).Format("{0:MM/dd/yyyy}").Width(60).Title("Min End");
            columns.Bound(o => o.MinEndDays).Width(100).Title("Min End Days");
            columns.Command(commands =>
            {
                commands
                .Custom("Edit")
                .Text("Edit")
                .DataRouteValues(route =>
                {
                    route.Add(o => o.ID).RouteKey("deliveryGroupID");
                    route.Add(o => o.PlanID).RouteKey("planID");
                })
                .Ajax(false)
                .Action("EditDeliveryGroup", "SkuRange");

                commands
                .Custom("Export")
                .Text("Export")
                .DataRouteValues(route =>
                {
                    route.Add(o => o.ID).RouteKey("deliveryGroupID");
                })
                .Ajax(false)
                .Action("ExcelDeliveryGroup", "SkuRange");

                commands
                .Custom("Delete")
                .Text("Delete")
                .DataRouteValues(route =>
                {
                    route.Add(o => o.ID).RouteKey("deliveryGroupID");
                    route.Add(o => o.PlanID).RouteKey("planID");
                })
                .Ajax(false)
                .Action("DeleteDeliveryGroup", "SkuRange").HtmlAttributes(new { onclick = "return confirm('Are you sure?');" });
            }).HtmlAttributes(new { style = "text-align: left" }).Width(170);
            //columns.Bound(o => o.ALRStartDate)
            //.Template(@<text>
            //                    @if (item.ALRStartDate != null)
            //                    {
            //                        @Html.Raw(String.Format("{0:MM/dd/yyyy}", item.ALRStartDate) + "&nbsp;<a class=\"t-button\" href='/SkuRange/StopDeliveryGroup?deliveryGroupID=" + item.ID + "&planID=" + item.PlanID + "'>Stop</a>")
            //                    }
            //                    else
            //                    {
            //                        @Html.Raw("<a class=\"t-button\" href='/SkuRange/StartDeliveryGroup?deliveryGroupID=" + item.ID + "&planID=" + item.PlanID + "'>Start</a>")
            //                    }
            //</text>).Width(150).Title("Sending ALR Since");

            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Server();
            })
            .Footer(false)
            .HtmlAttributes(new { style = "width: 1000px;" })
            .RowAction(row =>
            {
                if (row.DataItem.Selected)
                {
                    row.HtmlAttributes["class"] = "t-state-selected";
                }
            }
            )
) 
</div>
@if (Model.RangePlan.StoreCount > Model.DeliveryStoreCount)
{ 
    @Html.Raw("<font color='red'>You have " + (Model.RangePlan.StoreCount - Model.DeliveryStoreCount) + " store(s) that are not in a delivery group.<BR>They will not be ranged in Q without being in a delivery group.</font>&nbsp;&nbsp;")
    @Html.ActionLink("Show Stores", "ShowStoresWithoutDeliveryGroup", new { planID = Model.RangePlan.Id }, new { @class = "t-button" })
}

@if (Model.RangePlan.OPDepartment)
{
    <fieldset style="width:765px">
        <legend align="left">Order Planning Request</legend>

        @if (Model.OrderPlanningRequest != null)
        {
        <div class="t-widget t-grid">
            <table width="765px" cellpadding="0" cellspacing="0">
            <thead class="t-grid-header">
            <tr>
                <th class="t-header">Start Requesting</th>
                <th class="t-header">Request Until</th>
                <th class="t-header">Comment</th>
                <th class="t-header"></th>
            </tr>
            </thead>
            <script>
                function showTest() {
                    $('#testdiv').empty().append('<table><tr><td>Version</td><td>PO</td><td>Comment</td><td></td></tr><tr><td>1234</td><td>6345100</td><td>25 doors</td><td><input type="button" value="Apply"/></td></tr><tr><td>1235</td><td>6345455</td><td>200 doors</td><td><input type="button" value="Apply"/></td></tr></table><input type="button" onclick="closeTest()" value="Close"/>');
                    $('#testdiv').append('<br>The list is versions that have POs created off of them.  What would we apply here, mins/max?, dates?, limit to these stores?, add these stores?')
                }

                function closeTest() {
                    $('#testdiv').empty();
                 }
            </script>
            <tbody>
                <tr>
                    <td>@Html.DisplayFor(m => m.OrderPlanningRequest.StartSend)</td>
                    <td>@Html.DisplayFor(m => m.OrderPlanningRequest.EndSend)</td>
                    <td>@Html.DisplayFor(m => m.OrderPlanningRequest.Comment)</td>
                    <td>
                    @Html.ActionLink("Edit", "EditOrderPlanningRequest", new { planID = Model.RangePlan.Id }, new { @class = "t-button" })
                    @Html.ActionLink("Delete", "DeleteOrderPlanningRequest", new { planID = Model.RangePlan.Id }, new { @class = "t-button", onclick = "return confirm('Are you sure?');" })
                    @*<div class='t-button' onclick="showTest()">Apply to AR?</div>*@
                    </td></tr>
            </tbody>
            </table>
        </div>        
        <div id=testdiv></div>
        }
        else
        {
            <a class='t-button' href="CreateOrderPlanningRequest?planID=@Model.RangePlan.Id">Create OP Request</a>
        }
    </fieldset>
}
<!--
<fieldset style="width:765px">
    <b>ALR Status:</b><br />

    @*if (Model.Plan.ALRStartDate != null)
    {
        @Html.Raw("Sending ALR Since ")
        @Html.DisplayFor(m => m.Plan.ALRStartDate)
        @Html.Raw("&nbsp;&nbsp;")
        @Html.ActionLink("Stop Sending", "StopALR", new { planID = Model.PlanID }, new { @class = "t-button", onclick = "return confirm('Are you sure?');" })
    }
    else
    {
        <a class='t-button' href="StartALR?planID=@Model.PlanID">Start Sending ALR into Quantum</a>
    }*@
</fieldset>-->


<div style="margin-left:0px;margin-right:200px;" class="fieldset">
<b>Filters:</b><br />
<div class="t-button" onclick="showRuleSelector()">Edit Filter Rules</div>
<div class="t-button" onclick="showRuleSelectorExcel()">Filter Excel Upload</div>
@Html.ActionLink("Clear Filtered Stores", "ClearRules", new { value = "", planID = Model.RangePlan.Id, ruleType = "SizeAlc" }, new { @class = "t-button" })
@*@if ("emptyStartDates".Equals(ViewData["show"]))
{ 
    @Html.ActionLink("Show All Filtered", "PresentationQuantities", new { planID = ViewData["planID"], message = "", page = 0, show = "" }, new { @class = "t-button" })
}
else
{   
    @Html.ActionLink("Show Filtered With Blank Start Dates", "PresentationQuantities", new { planID = ViewData["planID"], message = "", page = 0, show = "emptyStartDates" }, new { @class = "t-button" })
}*@
<div id="ruleSelector" style="display:none">
    @Html.Partial(Url.Content("~/Views/Rule/RuleFilterNoStores.cshtml"), Model, ViewData)
</div>
    <br />
    <div id="filtermessage">
    <font color="red">
    @Html.Raw("Filter of Range Plan showing  " + Model.StoreCount + " store(s).") 
    </font>
    </div>
</div>

@if ((Model.StoreCount > 0) && (Model.TotalSizeAllocations.Count == 0))
{
    if (!("emptyStartDates".Equals(ViewData["show"])))
    {
        @Html.Raw("<font color='red'>There is a problem with this sku, there are no sizes.  </font>")
    }
}
<div id="sizeallocs">
@Html.Partial(@Url.Content("~/Views/SkuRange/TotalSizeAllocation.cshtml"), Model.TotalSizeAllocations)

@Html.Partial(@Url.Content("~/Views/SkuRange/StoreSizeAllocation.cshtml"), Model.SizeAllocations)
</div>
@Html.ActionLink("Back to List", "Index", null, new { @class = "t-button" })
@Html.ActionLink("Stores", "EditStores", new { planID = Model.RangePlan.Id }, new { @class = "t-button" })
@Html.ActionLink("Download to Excel", "ExcelRange", new { sku = Model.RangePlan.Sku }, new { @class = "t-button" })
@Html.ActionLink("Preview Q Feed", "ShowQFeed", new { planID = Model.RangePlan.Id }, new { @class = "t-button" })


