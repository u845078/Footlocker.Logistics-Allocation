@model IEnumerable<SizeAllocation>

<link rel="stylesheet" type="text/css" href="../../Content/gridscroll.css" />

<style>
    .total 
    {
    }
    
    .initdemand
    {
        font-color:Red; 
        background-color : #99FFCC;
    }
</style>

@if (Model.Count() > 0)
{
<script>
    function disableFLPage() {
        $('StoreSizeAllocationDiv').hide();
    }

    function Page(pageid) {
        window.location = "PresentationQuantities?planID=" + planID + "&page=" + pageid + "&storeCount=" + $("#GridRows").val();
    }

    function ShowStoreCount() {
        window.location = "PresentationQuantities?planID=" + planID + "&page=1&storeCount=" + $("#GridRows").val();
    }

    function disableFLPage() {
        alarmWindow = document.body.appendChild(document.createElement("div"))
        alarmWindow.id = 'modalWindow';
        alarmWindow.style.height = document.documentElement.scrollHeight + 'px';
        alarmWindow.style.backgroundColor = '#000000'//'transparent';
        alarmWindow.style.position = 'absolute';
        alarmWindow.style.width = '100%';
        alarmWindow.style.top = '0px';
        alarmWindow.style.left = '0px';
        alarmWindow.style.zIndex = '10000';
        alarmWindow.style.opacity = .5;
        alarmWindow.style.MozOpacity = .5;
        alarmWindow.style.filter = 'alpha(opacity=50)';

        var ScrollTop = document.body.scrollTop;
        if (ScrollTop == 0) {
            if (window.pageYOffset)
                ScrollTop = window.pageYOffset;
            else
                ScrollTop = (document.body.parentElement) ? document.body.parentElement.scrollTop : 0;
        }

        //Create a div dynamically.
        element2 = document.createElement("div");
        element2.id = 'loading div';
        element2.style.position = 'absolute';
        element2.style.top = ScrollTop;
        element2.style.left = '0px';
        element2.style.width = '90%';
        element2.style.zIndex = '10001';
        element2.innerHTML = '<br><br><br><br><center><span class="FLtitle">Loading...</span></center>';
        document.body.appendChild(element2);
    }

    function getSelectedText(elementId) {
        var elt = document.getElementById('det[' + elementId + '].RangeType');

        if (elt.selectedIndex == -1)
            return null;

        return elt.options[elt.selectedIndex].text;
    }
    
    function SaveChanges(startrowid, rowid) {
        disableFLPage();
        var allocations = [];
        var daterow;
        for (var i = parseInt(startrowid); i < parseInt(rowid); i++) {
            if ($("input[name='det[" + i + "].EndDate']").val() != null)
            {
                daterow = i;
            }
            allocations.push({ "PlanID": $("input[name='det[" + i + "].PlanID']").val(),
                "Division": $("input[name='det[" + i + "].Division']").val(),
                "Store": $("input[name='det[" + i + "].Store']").val(),
                "Size": $("input[name='det[" + i + "].Size']").val(),
                "Range": ($("input[name='det[" + i + "].Range']:checked").length >0),
                "Min": $("input[name='det[" + i + "].Min']").val(),
                "Max": $("input[name='det[" + i + "].Max']").val(),
                "Days": $("input[name='det[" + i + "].Days']").val(),
                "InitialDemand": $("input[name='det[" + i + "].InitialDemand']").val(),
                "StartDate": $("input[name='det[" + daterow + "].StartDate']").val(),
                "EndDate": $("input[name='det[" + daterow + "].EndDate']").val(),
                "MinEndDays": $("input[name='det[" + i + "].MnEndDays']").val(),
                "MinEndDate":$("input[name='det[" + i + "].MinEndDate']").val()
            });
        }

        var dataString = JSON.stringify(allocations);

        $.ajax({
            url: "/SkuRange/SaveStoreSizeAllocationAjax",
            data: dataString,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            error: function (xhr, status) {
                alert(status);
            },
            success: function (result) {
                if (result == 'Success') {
                    window.location = window.location;
                }
                else {
                    alert(result);
                }
            }
        });
    }
</script>
    
<script>
    var sizeList = [];

    function GetMinDetTotals() {

        var sum = 0;
        var totalsum = 0;
        var array = [];
        var current = 0;
        var lastBreak = 0;
        var size;
        var qty;
        var me;
        $("[id*='sizeTotal']").each(function () {
            me = $(this).attr('id');
            $(this).empty().append(window['extra' + me.replace('sizeTotal', '')]);
            totalsum += window['extra' + me.replace('sizeTotal', '')];
        }); 
        $('input').filter(function () { return /^det.*Min/.test(this.name); }).each(function () {
            current = this.name.split('[')[1].split(']')[0];
            qty = Number($(this).val());
            totalsum += Number($(this).val());
            if ($.inArray(Number(current), breakIndexes) >= 0) {
                $('#DetTotal' + lastBreak).empty().append(Number(sum));
                lastBreak = current;
                sum = Number($(this).val());
            } else {
                sum += Number($(this).val());
            }
            size = sizeList[current];
            $("[id*='sizeTotal"+size+"']").each(function () {
                var szTotal = Number($(this).text());
                szTotal = szTotal + qty;
                $(this).empty().append(szTotal);
            }); 
        });
        $('#DetTotal' + lastBreak).empty().append(Number(sum));
        $('#DetTotal').empty().append(Number(totalsum));            
    }


    $(document).ready(
        function () {
            //$('input').filter(function () { return new RegExp("^det.*Min$").test(this.name); }).blur(GetMinDetTotals);
            $('input').filter(function () { return /^det.*Min/.test(this.name); }).blur(GetMinDetTotals);

            GetMinDetTotals();
            //toggleMinEndDate();
            //toggleInitDemand();

            var urlParams = new URLSearchParams(window.location.search);
            var storeCount = urlParams.get('storeCount');
            $("#GridRows").val(storeCount);
        }
    );

    function checkForChangeDetails(control) {
        $("[name='" + control + "'").css("background-color", "yellow");       
    }
</script>

<div id="StoreSizeAllocationDiv">
@using (Html.BeginForm("SaveStoreSizeAllocation", "SkuRange", FormMethod.Post))
{
    <fieldset style="max-width: 1750px; min-width: 1195px;">
        <legend>Update Individual Stores</legend>
        <b>Show: </b>
        <script>
            function toggleInitDemand() {
                $(".idtoggle").toggle();
            }
            function toggleMinEndDate() {
                $(".minEndDate").toggle();
            }
            function toggleMin() {
                $(".min").toggle();
            }
            function toggleMax() {
                $(".max").toggle();
            }
            function toggleRange() {
                $(".range").toggle();
            }
            function toggleMinEndDays() {
                $(".minEndDays").toggle();
            }
            function toggleMinEndDate() {
                $(".minEndDate").toggle();
            }
        </script>
        <input type="checkbox" id="showInitDemand" value="Initial Demand" onclick="toggleRange()" checked>Range
        <input type="checkbox" id="showInitDemand" value="Initial Demand" onclick="toggleMin()" checked>Min
        <input type="checkbox" id="showInitDemand" value="Initial Demand" onclick="toggleMax()" checked>Max
        <input type="checkbox" id="showInitDemand" value="Initial Demand" onclick="toggleInitDemand()">Base Demand
        <input type="checkbox" id="showInitDemand" value="Initial Demand" onclick="toggleMinEndDays()">Min End Days Override
        <input type="checkbox" id="showMinEndDate" value="Min End Date" onclick="toggleMinEndDate()" checked>Min End Date

        <div style="float: right;">
            <label for="GridRows">Rows to view:</label> 
            <select name="GridRows" id="GridRows" onchange="ShowStoreCount();">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>

        <div class="t-widget t-grid">
            <div class="scrollablearea" style="width: inherit">
                <table class="scrolltable" style="width: inherit;" cellpadding=0 cellspacing=0>
                    <tr>
                        <th nowrap class='headcolLeague'>
                            @Html.DisplayNameFor(model => model.League)
                            <br />
                        </th>
                        <th nowrap class='headcol'>
                            @Html.DisplayNameFor(model => model.Store)
                            <br />
                        </th>
                        <th nowrap class='headcol2'>
                            OnRange
                            <br />
                        </th>
                        <th nowrap class='headcol3'>
                            End
                            <br />
                        </th>
                        <th nowrap class='headcol5'>
                            (<span class='total' id="DetTotal"></span>)
                            <br />
                        </th>
                        @{
                            string prevStore = "";
                            string prevDiv = "";
                            if (Model.Count() > 0)
                            {
                                prevStore = Model.First().Store;
                                prevDiv = Model.First().Division;
                            }
                            Boolean alternate = false;
                            string scriptContent1 = "";
                            foreach (var item in Model)
                            {
                                if (!((prevDiv.Equals(item.Division)) && (prevStore.Equals(item.Store))))
                                {
                                    break;
                                }
                                @Html.Raw("<th class='long' nowrap>")
                                @Html.Raw(item.Size + "")
                                @Html.Raw("&nbsp;(<span class='total' id='sizeTotal" + item.Size + "'></span>)")

                                scriptContent1 += "var extra" + item.Size + " = Number(0);";
                                @Html.Raw("</th>")
                            }

                            <th></th>
                            @Html.Raw("</tr>")

                            prevStore = "FIRST";
                            prevDiv = "FIRST";
                            alternate = false;
                            int count = 0;
                            int startCount = 0;
                            int storeCount = 0;
                            int showStoreCount = Convert.ToInt32(ViewData["storeCount"]);
                            if (showStoreCount == 0)
                            {
                                showStoreCount = 10;
                            }

                            string pageString = Convert.ToString(ViewData["page"]);

                            if (string.IsNullOrEmpty(pageString))
                            {
                                ViewData["page"] = "1";
                            }

                            int page = Convert.ToInt32(ViewData["page"]);

                            int minStore = page * showStoreCount - showStoreCount;
                            int maxStore = page * showStoreCount - 1;
                            string scriptContent = "";

                            List<String> extraSizes = new List<String>();
                            List<int> extraQty = new List<int>();

                            foreach (var item in Model)
                            {
                                if (!(prevDiv == item.Division && prevStore == item.Store))
                                {
                                    if (prevDiv != "FIRST")
                                    {
                                        if (storeCount >= minStore && storeCount <= maxStore)
                                        {

                                            @Html.Raw("<td nowrap class=\"long\"><div class=\"t-button\" onclick=\"SaveChanges('" + startCount + "', '" + count + "');\" >Save</div></td>")
                                            @Html.Raw("</tr>");
                                            scriptContent += "maxCell = " + count + ";";
                                            scriptContent += "if (minCell == -1)";
                                            scriptContent += "{";
                                            scriptContent += "minCell = " + startCount;
                                            scriptContent += "}";
                                        }
                                        startCount = count;
                                        storeCount++;
                                    }
                                    else
                                    {
                                        scriptContent += "var planID = " + item.PlanID + ";";
                                        scriptContent += "var pageID = " + page + ";";
                                        scriptContent += "var breakIndexes=[];";
                                        scriptContent += "var minCell = -1;";
                                        scriptContent += "var maxCell=0;";
                                    }
                                    prevDiv = item.Division;
                                    prevStore = item.Store;
                                    if ((storeCount >= minStore) && (storeCount <= maxStore))
                                    {
                                        if (alternate)
                                        {
                                            @Html.Raw("<tr class = 't-alt scrolltr'>")
                                        }
                                        else
                                        {
                                            @Html.Raw("<tr class=\"scrolltr\">")
                                        }
                                        scriptContent += "breakIndexes.push(" + count + ");";

                                        if (alternate)
                                        {
                                            @Html.Raw("<td class=\"t-alt headcolLeague\">")
                                        }
                                        else
                                        {
                                            @Html.Raw("<td class=\"headcolLeague\">")
                                        }

                                        @Html.DisplayFor(modelItem => item.League)
                                        @Html.Raw("</td>")

                                        if (alternate)
                                        {
                                            @Html.Raw("<td class=\"t-alt headcol\">")
                                        }
                                        else
                                        {
                                            @Html.Raw("<td class=\"headcol\">")
                                        }
                                        alternate = !alternate;

                                        @Html.DisplayFor(modelItem => item.Store)
                                        @Html.Raw("</td>")
                                        @Html.Raw("<td class=\"headcol2\">")
                                        @Html.DisplayFor(m => item.StartDate);
                                        @Html.Raw("<input type='hidden' id='det[" + count + "]_StartDate' name='det[" + count + "].StartDate' value='" + item.StartDate + "'/>")
                                        @Html.Raw("</td>")
                                        @Html.Raw("<td class=\"headcol3\">")
                                        @(Html.Telerik().DatePicker()
                                                .Name("det[" + count + "].EndDate")
                                                .HtmlAttributes(new { id = "DatePicker_wrapper", title = "Last day of learning (end date + store lead time)" })
                                                .Value(item.EndDate).Enable(true)
                                        )
                                        @Html.Raw("</td><td class=\"headcol5\">")
                                        @Html.Raw("(<span class='total' id='DetTotal" + count + "'></span>)")
                                        @Html.Raw("</td>")
                                    }
                                }
                                scriptContent += "sizeList.push('" + item.Size + "');";

                                if ((storeCount >= minStore) && (storeCount <= maxStore))
                                {
                                    @Html.Raw("<td nowrap  class=\"long\">")

                                    @Html.Raw("<input name=\"det[" + count + "].PlanID\" type=\"hidden\" value=\"" + item.PlanID + "\"/>")
                                    @Html.Raw("<input name=\"det[" + count + "].Division\" type=\"hidden\" value=\"" + item.Division + "\"/>")
                                    @Html.Raw("<input name=\"det[" + count + "].Store\" type=\"hidden\" value=\"" + item.Store + "\"/>")
                                    @Html.Raw("<input name=\"det[" + count + "].Size\" type=\"hidden\" value=\"" + item.Size + "\"/>")

                                    @Html.Raw("<span name=\"det[" + count + "].checkbox\" >")
                                    @Html.CheckBox("det[" + count + "].Range", item.Range, new { @class = "range", onChange = "checkForChangeCheckBox(\"det[" + count + "].checkbox\");" })
                                    @Html.Raw("</span>")


                                    @Html.Raw("<input class=\"min\" name=\"det[" + count + "].Min\" type=\"text\" placeholder=\"min\" value=\"" + item.Min + "\" style = \"Width:28px\" onchange=\"checkForChange(this.name)\" onkeyup=\"checkForChange(this.name)\" onpaste=\"checkForChange(this.name)\" />")
                                    @Html.Raw("&nbsp;")
                                    @Html.Raw("<input class=\"max\" name=\"det[" + count + "].Max\" type=\"text\" placeholder=\"max\" value=\"" + item.Max + "\" style = \"Width:28px\" onchange=\"checkForChange(this.name)\" onkeyup=\"checkForChange(this.name)\" onpaste=\"checkForChange(this.name)\" />")
                                    @Html.Raw("&nbsp;")
                                    @Html.Raw("<input class=\"initdemand idtoggle\" placeholder=\"base\" hidden=true name=\"det[" + count + "].InitialDemand\" type=\"text\" value=\"" + item.InitialDemand + "\" style = \"Width:40px\" onchange=\"checkForChange(this.name)\" onkeyup=\"checkForChange(this.name)\" onpaste=\"checkForChange(this.name)\" />")
                                    @Html.Raw("&nbsp;")
                                    @Html.Raw("<input class=\"minEndDays\"name=\"det[" + count + "].MnEndDays\" hidden=true type=\"text\" value=\"" + item.MinEndDays + "\" style=\"Width:28px\" onchange=\"checkForChange(this.name)\" onkeyup=\"checkForChange(this.name)\" onpaste=\"checkForChange(this.name)\" />")
                                    @Html.Raw("&nbsp;")
                                    @Html.Raw("<span class=\"minEndDate\">" + (item.CalculatedMinEndDate == null ? "" : "(" + item.CalculatedMinEndDate + ")") + "</span>")
                                    @*@(Html.Telerik().DatePicker()
                                                            .Name("det[" + count + "].MnEndDate")
                                                            .HtmlAttributes(new { style = "display:none;width:90px", hidden="true", id = "DatePicker_wrapper", title = "Override of delivery group min end date", @class="minEndDate" })
                                                                .Value(item.MinEndDate).Enable(true).Format("MM/dd/yyyy")

                                    )*@
                                    @Html.Raw("</td>")
                                }
                                else
                                {
                                    if (!extraSizes.Contains(item.Size))
                                    {
                                        extraSizes.Add(item.Size);
                                        extraQty.Add(Convert.ToInt32(item.Min));
                                    }
                                    else
                                    {
                                        extraQty[extraSizes.IndexOf(item.Size)] += Convert.ToInt32(item.Min);
                                        extraQty.Add(Convert.ToInt32(item.Min));
                                    }

                                    //scriptContent += "extra" + item.Size + " += Number(" + item.Min + ");";
                                }
                                count++;
                            }

                            <script type="text/javascript">
        @Html.Raw(scriptContent1)
                            </script>
                            <script>
            @foreach (string size in extraSizes)
            {
                scriptContent += "extra" + size + " += Number(" + extraQty[extraSizes.IndexOf(size)] + ");";
            }

            @Html.Raw(scriptContent)

                            </script>

                            if (!(prevDiv.Equals("FIRST")))
                            {
                                if ((storeCount >= minStore) && (storeCount <= maxStore))
                                {
                                    @Html.Raw("<td class=\"scrolltd\"><div class=\"t-button\" onclick=\"SaveChanges('" + startCount + "', '" + count + "');\" >Save</div></td>")
                                    <script>
                maxCell = @count;
                if (minCell == -1)
                {
                    minCell = @startCount;
                }
                                    </script>
                                }
                                @Html.Raw("</tr></table>");

                                @Html.Raw("</div>");
                                int pagesInSet = 25;
                                int pageSet = Convert.ToInt32(((page - 1) / pagesInSet) + 1);
                                int jpageSet;
                                int storePageOffset = 1;
                                int totalNumberOfPages = (storeCount / showStoreCount) + 1;
                                int firstPageOfCurrentSet = (((page - 1) / pagesInSet) * pagesInSet) + 1;
                                int priorPageSet = firstPageOfCurrentSet - 1;

                                <div class="t-grid-pager t-grid-bottom">
                                    <div class="t-status"></div>
                                    <div class="t-pager t-reset">
                                        @if (firstPageOfCurrentSet > 1)
                                        {
                                            <a class="t-link t-state-enabled" onclick="Page('1');">
                                                <span class="t-icon t-arrow-first">first</span>
                                            </a>
                                            <a class="t-link t-state-enabled" onclick="Page('@priorPageSet');">
                                                <span class="t-icon t-arrow-prev">prev</span>
                                            </a>
                                        }
                                        else
                                        {
                                            <a class="t-link t-state-disabled">
                                                <span class="t-icon t-arrow-first">first</span>
                                            </a>
                                            <a class="t-link t-state-disabled">
                                                <span class="t-icon t-arrow-prev">prev</span>
                                            </a>
                                        }
                                        <div class="t-numeric">
                                            @{
                                                for (int j = 0; j <= storeCount; j += showStoreCount)
                                                {
                                                    storePageOffset = (j / showStoreCount) + 1;
                                                    jpageSet = ((j / showStoreCount) / pagesInSet) + 1;

                                                    if (pageSet == jpageSet)
                                                    {
                                                        if (storePageOffset == page)
                                                        {
                                                            @Html.Raw("<span class=\"t-state-active\" >" + storePageOffset + "</span>")
                                                        }
                                                        else
                                                        {
                                                            @Html.Raw("<div class=\"t-link\" onclick=\"Page('" + storePageOffset + "');\" >" + storePageOffset + "</div>")
                                                        }
                                                    }
                                                }

                                                int nextPageSet = (((page / pagesInSet) + 1) * pagesInSet) + 1;
                                                if (page < nextPageSet && totalNumberOfPages >= nextPageSet)
                                                {
                                                    <a class="t-link t-state-enabled" onclick="Page('@nextPageSet');"><span class="t-icon t-arrow-next">next</span></a>
                                                    <a class="t-link t-state-enabled" onclick="Page('@storePageOffset ');"><span class="t-icon t-arrow-last">last</span></a>
                                                }
                                                else
                                                {
                                                    <a class="t-link t-state-disabled"><span class="t-icon t-arrow-next">next</span></a>
                                                    <a class="t-link t-state-disabled"><span class="t-icon t-arrow-last">last</span></a>
                                                }
                                            }
                                        </div><div class="t-status-text"></div>
                                    </div>

                                </div>
                                <br />
                                @Html.Raw("<div class=\"t-button\" style=\"margin-bottom: 5px;\" onclick=\"SaveChanges(minCell,maxCell);\" >Save All Changes</div>")

                            }
                        }
            </div>
            <br />
    </fieldset>
}
</div>
}

@if (ViewData["LifeCycle"] != null)
{ 
<script type="text/javascript">
    var ss_days = @ViewData["LifeCycle"];
</script>
}
else
{ 
<script type="text/javascript">
    var ss_days = 365;
</script>

}
<script type="text/javascript">
//    Date.prototype.addDays = function (days) {
//        var dat = new Date(this.valueOf());
//        dat.setDate(dat.getDate() + days);
//        return dat;
//    }

    function setEndDate(e) {
        //alert(e.target.id.replace('Start', 'End'));
        var start = e.target.id;
        start = start.replace('_', '.');
        //alert(start);
        var end = start.replace('Start', 'End');
        //alert(end);
        var date = new Date($('[name="' + start + '"]').val());
        if ((date != 'NaN') && (date != 'Invalid Date')) {
            date = date.addDays(ss_days);
            $('[name="' + end + '"]').val((date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear());
        }
        else {
            $('[name="' + end + '"]').val('');
        }
    }
</script>
