@model IEnumerable<Footlocker.Logistics.Allocation.Models.RingFence>

@{
    ViewBag.Title = "Ring Fences";
}
<script>
    function confirmPick(store) {
        if (store != '') {
            return confirm('Are you sure you want to pick this ring fence?  This cannot be undone.  The ring fence will be removed, and inventory sent to THIS store.');
        }
        else {
            return true;
        }
    }


    function MassDeleteGrid(div, store) {
        if (confirm('Are you sure you want to delete this group of ring fences?')) {
            window.location = "/Ringfence/MassDeleteRingfenceStore?div=" + div + "&store=" + store;
        }
    }

    function MassPickGrid(div, store) {
        //redirecting them to show them RDQs with ability to release them
        if (confirm('The system will only pick active, non-expired ringfences.  Are you sure you want to create picks for this group of ring fences?')) {
            window.location = "/Ringfence/MassPickRingfenceStore?div=" + div + "&store=" + store;
        }
    }

    function MassPickWarehouseGrid(div, store) {
        //redirecting them to show them RDQs with ability to release them
        if (confirm('Are you sure you want to create picks for this group of ring fences?')) {
            window.location = "/Ringfence/MassPickRingFenceStoreNoFuture?div=" + div + "&store=" + store;
        }
    }

    function MassEditGrid(div, store) {
        //redirecting them to show them RDQs with ability to release them
        window.location = "/Ringfence/MassEditRingfenceStore?div=" + div + "&store=" + store;
    }

    function PickFOB(div, store) {
        //redirecting them to show them RDQs with ability to release them
        window.location = "/Ringfence/PickFOB?div=" + div + "&store=" + store;
    }

    function ExportExcel(div, store) {
        //redirecting them to show them RDQs with ability to release them
        window.location = "/RingFence/DestExport?div=" + div + "&store=" + store;
    }
</script>

<h2>Ring Fences</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "t-button" })
    @Html.ActionLink("Upload", "Upload", null, new { @class = "t-button" })
    @Html.ActionLink("Upload Deletes", "UploadDeletes", null, new { @class = "t-button" })
</p>

<div class="t-tabstrip-wrapper">
<div id="tabstrip" data-role="tabstrip" tabindex="0" class="t-widget t-header t-tabstrip" role="tablist" aria-activedescendant="tabstrip_ts_active">
                    <ul class="t-tabstrip-items t-reset">
                        <li class="t-item t-state-default" role="tab" aria-controls="tabstrip-3"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/Index">
                            All Ringfences
                        </a></li>                
                        <li class="t-item t-state-default t-first t-tab-on-top" role="tab" aria-controls="tabstrip-1" aria-selected="true"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/IndexSummary">
                            By Product
                        </a></li><li class="t-item t-state-default t-state-active" role="tab" aria-controls="tabstrip-2"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/IndexByStore">
                            By Destination
                        </a></li>
                    </ul>
<div class="t-content t-state-active" id="tabstrip-1" role="tabpanel" aria-expanded="true" style="display: block; opacity: 1;">
<br />

@Html.Raw("<font color=red>" + ViewData["message"] + "</font>")
    @(Html.Telerik().Grid<Footlocker.Logistics.Allocation.Models.StoreLookup>()
        .Name("RingFenceSummaryGrid")
        .HtmlAttributes(new { @class = "summary-grid" })
        .Columns(columns =>
        {
            columns.Bound(rf => rf.Division).Visible(true);
            columns.Bound(rf => rf.Store).Visible(true);
            columns.Bound(rf => rf.Mall).Visible(true);
            columns.Bound(rf => rf.City).Visible(true);
            columns.Bound(rf => rf.State).Visible(true);
            columns.Template(@<text> 
                                   @Html.Raw("<a class=\"t-button\" href='javascript:MassEditGrid(\"" + item.Division + "\",\"" + item.Store + "\");'>Edit</a>")
                                   @Html.Raw("<a class=\"t-button\" href='javascript:MassDeleteGrid(\"" + item.Division + "\",\"" + item.Store + "\");'>Delete</a>")
                                   @Html.Raw("<a class=\"t-button\" href='javascript:MassPickGrid(\"" + item.Division + "\",\"" + item.Store + "\");'>Pick</a>")
                               </text>)
            .ClientTemplate("<a class=\"t-button\" href='javascript:MassEditGrid(\"<#= Division #>\",\"<#= Store #>\");'>Edit</a>"
                + "<a class=\"t-button\" href='javascript:MassDeleteGrid(\"<#= Division #>\",\"<#= Store #>\");'>Delete</a>"
                + "<a class=\"t-button\" href='javascript:MassPickGrid(\"<#= Division #> \",\"<#= Store #>\");'>Pick All</a>"
                + "<a class=\"t-button\" href='javascript:MassPickWarehouseGrid(\"<#= Division #> \",\"<#= Store #>\");'>Pick Warehouse</a>"
                + "<a class=\"t-button\" href='javascript:PickFOB(\"<#= Division #> \",\"<#= Store #>\");'>FOB</a>"
                + "<a class=\"t-button\" href='javascript:ExportExcel(\"<#= Division #> \",\"<#= Store #>\");'>Export to Excel</a>"
            ).Width(350);
        })
        .DataBinding(dataBinding =>
        {
            dataBinding.Ajax().Select("_RingFenceStores", "RingFence");
        })

        .Sortable(s =>
        {
            s.SortMode(GridSortMode.MultipleColumn);
            //s.OrderBy(order => order.Add(rf => rf.CreateDate).Descending());
        })
        .Pageable(p => p.PageSize(10))
        .Filterable()
        .Groupable(grouping => grouping.Enabled(false))
        .Footer(true)
                .DetailView(ordersDetailView => ordersDetailView.ClientTemplate(
                    Html.Telerik().Grid<Footlocker.Logistics.Allocation.Models.RingFence>()
                                .Name("RingFence" + "_<#= Store #>")
                            .Columns(columns =>
                            {
                                columns.Bound(rf => rf.Division).Width(30).Title("Div").Visible(true);
                                columns.Bound(rf => rf.Store).Width(30).Visible(true);
                                columns.Bound(rf => rf.Sku).Width(150).Visible(true);
                                columns.Bound(rf => rf.ItemDescription).Width(150).Visible(true).Title("Description");
                                columns.Bound(rf => rf.Qty).Width(10).Visible(true).Aggregate(aggreages => aggreages.Sum())
                                            .ClientFooterTemplate("Filtered Qty: <#= Sum #>");
                                columns.Bound(rf => rf.StartDate).Format("{0:MM/dd/yyyy}").Title("Start Date").Width(30).Visible(true);
                                columns.Bound(rf => rf.EndDate).Format("{0:MM/dd/yyyy}").Title("End Date").Width(30).Visible(true);
                                columns.Bound(rf => rf.RingFenceTypeDescription).Width(10).Visible(true).Title("Type");
                                columns.Bound(rf => rf.Comments);
                                columns.Bound(rf => rf.CreatedBy).Title("Updated By").Visible(true);
                                columns.Bound(rf => rf.CreateDate).Format("{0:MM/dd/yyyy}").Title("Update Date").Width(30).Visible(true);
                                columns.Template(@<text>
                                            <span style="">
                                                @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new {@class="t-button"})
                                                @Html.ActionLink("Details", "SizeSummary", new { id = item.ID }, new { @class = "t-button" })
                                                @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class="t-button", onclick = "return confirm('Are you sure you want to delete this ring fence?  This cannot be undone.  The ring fence will be removed, and inventory released to ANY store.');" })
                                                @if (item.CanPick)
                                                {
                                                    @Html.ActionLink("Pick", "Pick", new { id = item.ID }, new { @class="t-button", onclick = "return confirmPick('" + item.Store + "')" })
                                                }
                                            </span>
                                        </text>)
                                    .Width(400)
                                    .ClientTemplate(
                                    "<a class='t-button' href='"
                                        + Url.Content("~/Ringfence/Edit/<#= ID #>")
                                        + "'>Edit</a>"
                                        + "<a class='t-button' href='"
                                        + Url.Content("~/Ringfence/SizeSummary/<#= ID #>")
                                        + "'>Details</a>"

                                        + "<a onclick=\"return confirm('Are you sure you want to delete this ring fence?  This cannot be undone.  The ring fence will be removed, and inventory released to ANY store.');\" class='t-button' href='"
                                        + Url.Content("~/Ringfence/Delete/<#= ID #>")
                                        + "'>Delete</a>"

                                        + "<a onclick=\"return confirmPick('<#= ID #>')\" class='t-button' href='"
                                        + Url.Content("~/Ringfence/Pick/<#= ID #>'")
                                        + " style=\"display: <#= CanPick ? 'inline-block': 'none' #>;\">Pick</a>"
                                    );
                            })
                        .DataBinding(dataBinding => dataBinding.Ajax()
                        .Select("_RingFencesForStore", "RingFence", new { div = "<#= Division #>", store = "<#= Store #>" }))
                        .Pageable()
                        .Sortable()
                        .Filterable()
                        .ToHtmlString()
                        ))
        )
</div>                
</div>
</div>