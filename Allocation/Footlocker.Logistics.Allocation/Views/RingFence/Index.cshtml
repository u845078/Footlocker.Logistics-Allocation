@model IEnumerable<Footlocker.Logistics.Allocation.Models.RingFence>

@{
    ViewBag.Title = "Ring Fences";
}
<script>
    function confirmPick(store) {
        if (store != '') {
            return confirm('Are you sure you want to pick this ring fence?  This cannot be undone.  The ring fence will be removed, and inventory sent to THIS store.');
        }
        else {
            return true;
        }
    }
</script>

<h2>Ring Fences</h2>

<p>
    @Html.ActionLink("Create New", "Create",null, new { @class="t-button"})
    @Html.ActionLink("Upload", "Upload",null, new { @class="t-button"})
    @Html.ActionLink("Upload Deletes", "UploadDeletes", null, new { @class = "t-button" })
</p>

<div class="t-tabstrip-wrapper">
<div id="tabstrip" data-role="tabstrip" tabindex="0" class="t-widget t-header t-tabstrip" role="tablist" aria-activedescendant="tabstrip_ts_active" style="width: 1200px;">
    <ul class="t-tabstrip-items t-reset">
        <li class="t-item t-state-default t-state-active" role="tab" aria-controls="tabstrip-3"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/Index">
            All Ringfences
        </a></li>                
        <li class="t-item t-state-default t-first t-tab-on-top" role="tab" aria-controls="tabstrip-1" aria-selected="true"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/IndexSummary">
            By Product
        </a></li><li class="t-item t-state-default" role="tab" aria-controls="tabstrip-2"><span class="t-loading t-complete"></span><a class="t-link" href="/RingFence/IndexByStore">
            By Destination
        </a></li>
    </ul>
<div class="t-content t-state-active" id="tabstrip-1" role="tabpanel" aria-expanded="true" style="display: block; opacity: 1;">
<br />

@Html.Raw("<font color=red>" + ViewData["message"] + "</font>")
    @(Html.Telerik().Grid<Footlocker.Logistics.Allocation.Models.RingFence>(Model)
        .Name("VendorsGrid")
        .HtmlAttributes(new { @class = "details-grid" })
        .HtmlAttributes(new { @style = "width : 100%" })
        .Columns(columns =>
        {
            columns.Bound(rf => rf.Division).Width(30).Title("Div").Visible(true);
            columns.Bound(rf => rf.Store).Width(30).Visible(true);
            columns.Bound(rf => rf.Sku).Width(150).Visible(true);
            columns.Bound(rf => rf.ItemMaster.Description).Width(150).Visible(true).FooterTemplate(@<text>
                            @Html.Raw("Filtered Qty:  ")
                    </text>); ;
            columns.Bound(rf => rf.Qty).Aggregate(aggreages => aggreages.Sum()).Width(10)
                   .ClientFooterTemplate("<#= Sum #>").FooterTemplate(@<text>
                            @Html.Raw(item.Sum)
                    </text>);
            columns.Bound(rf => rf.StartDate).Format("{0:MM/dd/yyyy}").Title("Start Date").Width(30).Visible(true);
            columns.Bound(rf => rf.EndDate).Format("{0:MM/dd/yyyy}").Title("End Date").Width(30).Visible(true);
            columns.Bound(rf => rf.RingFenceType.Description).Width(10).Visible(true).Title("Type");
            columns.Bound(rf => rf.Comments);
            columns.Bound(rf => rf.LastModifiedUserName).Title("Updated By").Width(150).Visible(true);
            columns.Bound(rf => rf.LastModifiedDate).Format("{0:MM/dd/yyyy h:mm tt}").Width(150).Title("Update Date").Visible(true);
            columns.Template(@<text>
                        <span style="">
                            @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "t-button" })
                            @Html.ActionLink("Details", "SizeSummary", new { id = item.ID }, new { @class = "t-button" })
                            @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class = "t-button", onclick = "return confirm('Are you sure you want to delete this ring fence?  This cannot be undone.  The ring fence will be removed, and inventory released to ANY store.');" })
                            @if (item.CanPick)
                            {
                                @Html.ActionLink("Pick", "Pick", new { id = item.ID }, new { @class = "t-button", onclick = "return confirmPick('" + item.Store + "')" })
                            }
                        </span>
                    </text>)
                .Width(400);
        })
        .Sortable(s =>
        {
            s.SortMode(GridSortMode.MultipleColumn);
            //s.OrderBy(order => order.Add(rf => rf.CreateDate).Descending());
        })
        .Pageable(p => p.PageSize(10))
        .Filterable()
        .Groupable(grouping => grouping.Enabled(false))
        .Footer(true)
        )


</div>                
</div>
</div>
