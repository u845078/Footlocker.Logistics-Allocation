@model Footlocker.Logistics.Allocation.Models.RingFencePickModel

@{
    ViewBag.Title = "StorePick";
}

<script src="~/Scripts/FootLocker/telerikShims_ChildGrid.js" type="text/javascript"></script>

<h2>StorePick</h2>

@using (Html.BeginForm("PickStorePick", "RingFence"))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Create Pick for Store</legend>
            @Html.HiddenFor(m => Model.RingFence.ID)
            @Html.HiddenFor(m => Model.RingFence.Sku)
            @Html.HiddenFor(m => Model.RingFence.Division)
            @Html.HiddenFor(m => Model.RingFence.StartDate)
            @Html.DisplayFor(m => Model.RingFence.Sku)<br />
            Division:  @Html.DropDownListFor(m => Model.Division, new SelectList(Model.Divisions, "DivCode", "DivisionName"))
            <br />
            Store:  @Html.EditorFor(m => Model.Store)
            @Html.ValidationMessageFor(m => Model.Store)
            <br />

            @(Html.Telerik().Grid(Model.Details)
                .Name("RingFenceDetailGrid")
                .Columns(columns =>
                {
                    columns.Template(@<text>@Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].RingFenceID", item.RingFenceID)
                                            @Html.Label("Details[" + Model.Details.IndexOf(item) + "].Size", item.Size, new { @class = "caselot-input" })
                                            @Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].Size", item.Size)
                                    </text>).Title("Size/Caselot").Width(150);
                    columns.Template(@<text>@Html.Label("Details[" + Model.Details.IndexOf(item) + "].Warehouse", item.Warehouse)
                                            @Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].DCID", item.DCID)
                                    </text>).Title("Warehouse").Width(100);
                    columns.Template(@<text>@Html.Label("Details[" + Model.Details.IndexOf(item) + "].PO", item.PO)
                                            @Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].PO", item.PO)
                                    </text>).Title("PO").Width(100);
                    columns.Template(@<text>@Html.Label("Details[" + Model.Details.IndexOf(item) + "].Qty", item.Qty.ToString())
                                            @Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].Qty", item.Qty.ToString())
                                    </text>).Title("Total Qty").Width(100);
                    columns.Template(@<text>@Html.TextBox("Details[" + Model.Details.IndexOf(item) + "].AssignedQty", item.AssignedQty)
                                    </text>).Title("Qty Assigned").Width(100);
                    columns.Template(@<text>@Html.Label("Details[" + Model.Details.IndexOf(item) + "].Message", item.Message ?? String.Empty, new { @style = "color:red" })
                                            @Html.Hidden("Details[" + Model.Details.IndexOf(item) + "].Message", item.Message ?? String.Empty)
                                    </text>).Title(String.Empty);
                })
                .DetailView(dv =>
                    dv.Template(@<text>
                        @(Html.Telerik().Grid(item.PackDetails)
                            .Name("PackDetails_" + item.Size.Trim())
                            .Columns(columns =>
                            {
                                columns.Bound(det => det.ID).Title("ID").Visible(false);
                                columns.Bound(det => det.PackID).Title("PackID").Visible(false);
                                columns.Bound(det => det.Size).Title("Size").Width(50).Visible(true);
                                columns.Bound(det => det.Quantity).Title("Qty").Visible(true);
                            })
                            .ClientEvents(events =>
                            {
                                // NOTE: Hook into 'OnLoad' as server bound
                                events.OnLoad("function() { hack_setChildGridColumnWidth(1); }");
                            })
                            .Footer(false)
                            )
                    </text>)
                )
                .ClientEvents(events =>
                {
                    // NOTE: Hook into 'OnLoad' as server bound
                    events.OnLoad("function() { hack_removeTelerikExpandIconsForChildlessNodes($('.caselot-input'), function($child) { return $child.text().length < 4 }); }");
                })
                .DataBinding(dataBinding =>
                {
                    dataBinding.Server().Select("Pick", "RingFence", new { ID = Model.RingFence.ID });
                })
                .Footer(true)
                )
            
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "t-button" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
